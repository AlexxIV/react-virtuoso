{"version":3,"sources":["webpack:///./src/examples/ScrollToGroup.js","webpack:///./src/pages/scroll-to-group.js"],"names":["generateGroupedUsers","users","groups","groupCounts","virtuoso","useRef","useState","groupIndices","setGroupIndices","style","display","ref","indices","length","height","width","group","index","item","user","marginLeft","listStyle","fontSize","map","itemIndex","key","href","onClick","e","preventDefault","current","scrollToIndex","sidebar","path","Helmet","name","content"],"mappings":"yKAKe,aAAM,MAQoBA,YAAqB,KAApDC,EARW,EAQXA,MAAOC,EARI,EAQJA,OAAQC,EARJ,EAQIA,YACjBC,EAAWC,iBAAO,MATL,EAUqBC,mBAAS,IAA1CC,EAVY,KAUEC,EAVF,KAYnB,OACE,yBAAKC,MAAO,CAAEC,QAAS,SACrB,6BACE,kBAAC,IAAD,CACEC,IAAKP,EACLG,aAAc,SAAAK,GACRL,EAAaM,SAAWD,EAAQC,QAClCL,EAAgBI,IAGpBH,MAAO,CAAEK,OAAQ,QAASC,MAAO,SACjCZ,YAAaA,EACba,MAAO,SAAAC,GACL,OAAO,kBAAC,IAAD,KAAef,EAAOe,KAE/BC,KAAM,SAAAD,GACJ,OAAO,kBAAC,IAAD,CAAUE,KAAMlB,EAAMgB,GAAQA,MAAOA,QAKlD,wBACER,MAAO,CACLW,WAAY,OACZC,UAAW,OACXC,SAAU,WAGXf,EAAagB,KAAI,SAACC,EAAWP,GAAZ,OAChB,wBAAIQ,IAAKR,GACP,uBACES,KAAK,IACLC,QAAS,SAAAC,GACPA,EAAEC,iBACFzB,EAAS0B,QAAQC,cAAcP,KAGhCtB,EAAOe,W,SChDP,4BACb,kBAAC,IAAD,CAAQe,QAAS,kBAAM,kBAAC,IAAD,CAAQC,KAAK,oBAClC,kBAACC,EAAA,OAAD,KACE,0BACEC,KAAK,cACLC,QAAQ,uEAGZ,oDAEA,sHAEkC,8CAA0B,IAF5D,6EAMA,iJAIA,kBAAC,EAAD","file":"component---src-pages-scroll-to-group-js-186d3f97759a3cc5adb4.js","sourcesContent":["import React, { useState, useRef } from 'react'\nimport { GroupedVirtuoso } from 'react-virtuoso'\nimport { generateGroupedUsers } from './FakeData'\nimport { ExampleGroup, UserItem } from './ExampleComponents'\n\nexport default () => {\n  // the generateGroupedUsers is a dummy implementation\n  // that builds grouped data\n  // the users variable contains 500 user records, sorted by name\n  // the groups variable contains the first\n  // letter groups -> ['A', 'B', 'C'], etc.\n  // finally, the groupCounts specifies how many items each\n  // group has -> [ 20, 30, 15, 10 ], etc.\n  const { users, groups, groupCounts } = generateGroupedUsers(500)\n  const virtuoso = useRef(null)\n  const [groupIndices, setGroupIndices] = useState([])\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <div>\n        <GroupedVirtuoso\n          ref={virtuoso}\n          groupIndices={indices => {\n            if (groupIndices.length !== indices.length) {\n              setGroupIndices(indices)\n            }\n          }}\n          style={{ height: '600px', width: '300px' }}\n          groupCounts={groupCounts}\n          group={index => {\n            return <ExampleGroup>{groups[index]}</ExampleGroup>\n          }}\n          item={index => {\n            return <UserItem user={users[index]} index={index} />\n          }}\n        />\n      </div>\n\n      <ul\n        style={{\n          marginLeft: '1rem',\n          listStyle: 'none',\n          fontSize: '0.8rem',\n        }}\n      >\n        {groupIndices.map((itemIndex, index) => (\n          <li key={index}>\n            <a\n              href=\"#\"\n              onClick={e => {\n                e.preventDefault()\n                virtuoso.current.scrollToIndex(itemIndex)\n              }}\n            >\n              {groups[index]}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n","import React from 'react'\nimport Layout from '../components/layout'\nimport Source from '../components/source'\nimport Example from '../examples/ScrollToGroup'\nimport { Helmet } from 'react-helmet'\n\nexport default () => (\n  <Layout sidebar={() => <Source path=\"ScrollToGroup\" />}>\n    <Helmet>\n      <meta\n        name=\"description\"\n        content=\"React Grouped Virtuoso live example with UI to scroll to a group.\"\n      />\n    </Helmet>\n    <h2>Scrolling to a group</h2>\n\n    <p>\n      The example below re-creates the UI of the iOS contacts\n      listview. The component exposes <code>groupIndices</code>{' '}\n      property, which outputs the calculated item indices of the group\n      headers.\n    </p>\n    <p>\n      Using that, we can build an UI (in this case, a side list with\n      all first letters), which scrolls to a given group.\n    </p>\n    <Example />\n  </Layout>\n)\n"],"sourceRoot":""}