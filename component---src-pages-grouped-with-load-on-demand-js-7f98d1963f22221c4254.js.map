{"version":3,"sources":["webpack:///./src/examples/GroupWithLoadOnDemand.js","webpack:///./src/pages/grouped-with-load-on-demand.js","webpack:///./src/examples/FakeData.js"],"names":["GroupWithLoadOnDemand","_useMemo","useMemo","generateGroupedUsers","users","groups","groupCounts","_useState","useState","currentGroupCounts","setCurrentGroupCounts","loadedItems","useRef","_useState2","loading","setLoading","loadMore","useCallback","setTimeout","current","totalGroups","count","i","group","push","Math","min","length","calculateGroupsSoFar","useEffect","react_default","a","createElement","react_virtuoso_es_production","style","height","width","index","ExampleComponents","item","user","footer","padding","display","justifyContent","disabled","onClick","__webpack_exports__","layout","sidebar","source","path","generated","getUser","firstName","faker","name","lastName","initials","substr","description","company","catchPhrase","bgColor","commerce","color","fgColor","longText","lorem","paragraphs","avatar","internet","max","sort","b","groupedUsers","groupBy","Object","values","map","keys"],"mappings":"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","file":"component---src-pages-grouped-with-load-on-demand-js-7f98d1963f22221c4254.js","sourcesContent":["import React, {\n  useEffect,\n  useCallback,\n  useState,\n  useMemo,\n  useRef,\n} from 'react'\nimport { GroupedVirtuoso } from 'react-virtuoso'\nimport { generateGroupedUsers } from './FakeData'\nimport { ExampleGroup, UserItem } from './ExampleComponents'\n\n// Slices the total groups to the groups\n// which contain the items so far\n// for example, if you have [10, 10, 10, 10]\n// groups in total, slicing them to 23 will result in [10, 10, 3]\nconst calculateGroupsSoFar = (totalGroups, count) => {\n  const groups = []\n  let i = 0\n  do {\n    const group = totalGroups[i]\n    groups.push(Math.min(group, count))\n    count -= group\n    i++\n  } while (count > 0 && i <= totalGroups.length)\n  return groups\n}\n\nexport default () => {\n  const { users, groups, groupCounts } = useMemo(\n    () => generateGroupedUsers(500),\n    []\n  )\n\n  const [currentGroupCounts, setCurrentGroupCounts] = useState([])\n  const loadedItems = useRef(0)\n  const [loading, setLoading] = useState(false)\n\n  const loadMore = useCallback(() => {\n    setLoading(true)\n\n    // the set timeout call is just for example purposes.\n    // In the real world,\n    // this can fetch and append data from a remote server.\n    setTimeout(() => {\n      loadedItems.current += 50\n      setLoading(false)\n      setCurrentGroupCounts(\n        calculateGroupsSoFar(groupCounts, loadedItems.current)\n      )\n    }, 500)\n  }, [])\n\n  useEffect(loadMore, [])\n\n  return (\n    <GroupedVirtuoso\n      style={{ height: '350px', width: '400px' }}\n      groupCounts={currentGroupCounts}\n      group={index => (\n        <ExampleGroup>Group {groups[index]}</ExampleGroup>\n      )}\n      item={index => <UserItem user={users[index]} index={index} />}\n      footer={() => {\n        return (\n          <div\n            style={{\n              padding: '2rem',\n              display: 'flex',\n              justifyContent: 'center',\n            }}\n          >\n            <button disabled={loading} onClick={loadMore}>\n              {loading ? 'Loading...' : 'Press to load more'}\n            </button>\n          </div>\n        )\n      }}\n    />\n  )\n}\n","import React from 'react'\nimport Layout from '../components/layout'\nimport Source from '../components/source'\nimport Example from '../examples/GroupWithLoadOnDemand'\n\nexport default () => (\n  <Layout sidebar={() => <Source path=\"GroupWithLoadOnDemand\" />}>\n    <h2>Grouped by First Letter (Load on Demand)</h2>\n    <p>\n      The <code>GroupedVirtuoso</code> component accepts a{' '}\n      <code>footer</code> render prop, which can be used to host a\n      load more button that appends more items to the existing ones.\n    </p>\n    <p>\n      To add additional items to the groups, you should re-calculate\n      the <code>groupCounts</code> property value with the group\n      values of the newly loaded items. Check the source code of this\n      example for a possible implementation.\n    </p>\n    <Example />\n  </Layout>\n)\n","import faker from \"faker\"\nimport { groupBy } from \"lodash\"\n\nconst generated = []\n\nexport const getUser = index => {\n  if (!generated[index]) {\n    let firstName = faker.name.firstName()\n    let lastName = faker.name.lastName()\n    generated[index] = {\n      name: `${firstName} ${lastName}`,\n      initials: `${firstName.substr(0, 1)}${lastName.substr(0, 1)}`,\n      description: faker.company.catchPhrase(),\n      bgColor: faker.commerce.color(),\n      fgColor: faker.commerce.color(),\n      longText: faker.lorem.paragraphs(4),\n      avatar: faker.internet.avatar(),\n    }\n  }\n  return generated[index]\n}\n\nexport const generateGroupedUsers = max => {\n  const users = []\n  for (let i = 0; i < max; i++) {\n    users.push(getUser(i))\n  }\n\n  users.sort((a, b) => {\n    if (a.name < b.name) {\n      return -1\n    }\n    if (a.name > b.name) {\n      return 1\n    }\n    return 0\n  })\n\n  const groupedUsers = groupBy(users, user => user.name[0])\n  const groupCounts = Object.values(groupedUsers).map(users => users.length)\n  const groups = Object.keys(groupedUsers)\n\n  return { users, groupCounts, groups }\n}\n"],"sourceRoot":""}