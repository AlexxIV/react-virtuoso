{"version":3,"sources":["webpack:///./src/examples/ScrollSeekPlaceholders.js","webpack:///./src/pages/scroll-seek-placeholders.js"],"names":["GenerateItem","index","user","getUser","randomHeights","Array","fill","map","Math","round","random","useState","visibleRange","setVisibleRange","style","display","totalCount","item","scrollSeek","enter","velocity","abs","exit","shouldExit","change","_velocity","startIndex","endIndex","placeholder","height","backgroundColor","padding","boxSizing","overflow","background","width","sidebar","path","Helmet","name","content"],"mappings":"kLAKMA,EAAe,SAAAC,GACnB,OAAO,kBAAC,IAAD,CAAUC,KAAMC,YAAQF,GAAQA,MAAOA,KAG1CG,EAAgBC,MAAM,IACzBC,MAAK,GACLC,KAAI,kBAAMC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,MAE/B,aAAM,MAGqBC,mBAAS,CAAC,IAAK,MAAhDC,EAHY,KAGEC,EAHF,KAInB,OACE,yBAAKC,MAAO,CAAEC,QAAS,SACrB,kBAAC,IAAD,CACEC,WAAY,IACZC,KAAMjB,EACNkB,WAAY,CACVC,MAAO,SAAAC,GAAQ,OAAIZ,KAAKa,IAAID,GAAY,KACxCE,KAAM,SAAAF,GACJ,IAAMG,EAAaf,KAAKa,IAAID,GAAY,GAIxC,OAHIG,GACFV,EAAgB,CAAC,IAAK,MAEjBU,GAETC,OAAQ,SAACC,EAAD,OAAcC,EAAd,EAAcA,WAAYC,EAA1B,EAA0BA,SAA1B,OACNd,EAAgB,CAACa,EAAYC,KAG/BC,YAAa,gBAAGC,EAAH,EAAGA,OAAQ5B,EAAX,EAAWA,MAAX,OACX,yBACEa,MAAO,CACLe,SACAC,gBAAiB7B,EAAQ,EAAI,OAAS,UACtC8B,QAAS,MACTC,UAAW,aACXC,SAAU,WAGZ,yBACEnB,MAAO,CACLoB,WAAY,OACZL,OAAQzB,EAAcH,EAAQ,UAMxCa,MAAO,CAAEe,OAAQ,QAASM,MAAO,WAEnC,sDACyB,IACvB,6BACE,gCACGvB,EAAa,GADhB,MACuBA,EAAa,KAE/B,O,SCxDA,4BACb,kBAAC,IAAD,CAAQwB,QAAS,kBAAM,kBAAC,IAAD,CAAQC,KAAK,6BAClC,kBAACC,EAAA,OAAD,KACE,0BACEC,KAAK,cACLC,QAAQ,8DAGZ,uDACA,kCACM,4CADN,iHAMA,kBAAC,EAAD","file":"component---src-pages-scroll-seek-placeholders-js-1aef28d26f624b6cb1d9.js","sourcesContent":["import React, { useState } from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport { UserItem } from './ExampleComponents'\n\nconst GenerateItem = index => {\n  return <UserItem user={getUser(index)} index={index} />\n}\n\nconst randomHeights = Array(10)\n  .fill(true)\n  .map(() => Math.round(Math.random() * 60) + 10)\n\nexport default () => {\n  // use the visible range to provide information\n  // about the list current position.\n  const [visibleRange, setVisibleRange] = useState(['-', '-'])\n  return (\n    <div style={{ display: 'flex' }}>\n      <Virtuoso\n        totalCount={10000}\n        item={GenerateItem}\n        scrollSeek={{\n          enter: velocity => Math.abs(velocity) > 200,\n          exit: velocity => {\n            const shouldExit = Math.abs(velocity) < 30\n            if (shouldExit) {\n              setVisibleRange(['-', '-'])\n            }\n            return shouldExit\n          },\n          change: (_velocity, { startIndex, endIndex }) =>\n            setVisibleRange([startIndex, endIndex]),\n          // You can use index to randomize\n          // and make the placeholder list more organic.\n          placeholder: ({ height, index }) => (\n            <div\n              style={{\n                height,\n                backgroundColor: index % 2 ? '#fff' : '#f4f4f4',\n                padding: '8px',\n                boxSizing: 'border-box',\n                overflow: 'hidden',\n              }}\n            >\n              <div\n                style={{\n                  background: '#ccc',\n                  height: randomHeights[index % 10],\n                }}\n              ></div>\n            </div>\n          ),\n        }}\n        style={{ height: '400px', width: '350px' }}\n      />\n      <div>\n        Current visible range:{' '}\n        <div>\n          <strong>\n            {visibleRange[0]} - {visibleRange[1]}\n          </strong>\n        </div>{' '}\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport Layout from '../components/layout'\nimport Source from '../components/source'\nimport Example from '../examples/ScrollSeekPlaceholders'\nimport { Helmet } from 'react-helmet'\n\nexport default () => (\n  <Layout sidebar={() => <Source path=\"ScrollSeekPlaceholders\" />}>\n    <Helmet>\n      <meta\n        name=\"description\"\n        content=\"React Virtuoso live example of scroll seek placeholders.\"\n      />\n    </Helmet>\n    <h2>Scroll Seek Placeholder</h2>\n    <p>\n      The <code>scrollSeek</code> property allows you to render a\n      placeholder element instead of the actual item if the user\n      scrolls too fast.\n    </p>\n\n    <Example />\n  </Layout>\n)\n"],"sourceRoot":""}