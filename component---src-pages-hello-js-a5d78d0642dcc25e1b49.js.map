{"version":3,"sources":["webpack:///./src/examples/hello.js","webpack:///./src/pages/hello.js","webpack:///./src/examples/FakeData.js"],"names":["GenerateItem","index","react_default","a","createElement","ExampleComponents","user","getUser","hello","react_virtuoso_es_production","totalCount","overscan","item","style","height","width","__webpack_exports__","layout","sidebar","source","path","href","generated","firstName","faker","name","lastName","initials","substr","description","company","catchPhrase","bgColor","commerce","color","fgColor","longText","lorem","paragraphs","avatar","internet","generateGroupedUsers","max","users","i","push","sort","b","groupedUsers","groupBy","groupCounts","Object","values","map","length","groups","keys"],"mappings":"mKAKMA,EAAe,SAAAC,GACnB,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,KAAMC,YAAQN,GAAQA,MAAOA,KAGjCO,EAAA,kBACbN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEC,WAAY,IACZC,SAAU,IACVC,KAAMZ,EACNa,MAAO,CAAEC,OAAQ,QAASC,MAAO,YCTtBC,EAAA,0BACbd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQC,QAAS,kBAAMhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAQC,KAAK,YAClClB,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,yJAIEF,EAAAC,EAAAC,cAAA,oBAJF,mBAOAF,EAAAC,EAAAC,cAAA,6CACmCF,EAAAC,EAAAC,cAAA,qBADnC,iJAOAF,EAAAC,EAAAC,cAAA,qEAC4D,IAC1DF,EAAAC,EAAAC,cAAA,KAAGiB,KAAK,6CAAR,iBAFF,KAOAnB,EAAAC,EAAAC,cAACI,EAAD,uLC1BEc,EAAY,GAELf,EAAU,SAAAN,GACrB,IAAKqB,EAAUrB,GAAQ,CACrB,IAAIsB,EAAYC,IAAMC,KAAKF,YACvBG,EAAWF,IAAMC,KAAKC,WAC1BJ,EAAUrB,GAAS,CACjBwB,KAASF,EAAL,IAAkBG,EACtBC,SAAQ,GAAKJ,EAAUK,OAAO,EAAG,GAAKF,EAASE,OAAO,EAAG,GACzDC,YAAaL,IAAMM,QAAQC,cAC3BC,QAASR,IAAMS,SAASC,QACxBC,QAASX,IAAMS,SAASC,QACxBE,SAAUZ,IAAMa,MAAMC,WAAW,GACjCC,OAAQf,IAAMgB,SAASD,UAG3B,OAAOjB,EAAUrB,IAGNwC,EAAuB,SAAAC,GAElC,IADA,IAAMC,EAAQ,GACLC,EAAI,EAAGA,EAAIF,EAAKE,IACvBD,EAAME,KAAKtC,EAAQqC,IAGrBD,EAAMG,KAAK,SAAC3C,EAAG4C,GACb,OAAI5C,EAAEsB,KAAOsB,EAAEtB,MACL,EAENtB,EAAEsB,KAAOsB,EAAEtB,KACN,EAEF,IAGT,IAAMuB,EAAeC,kBAAQN,EAAO,SAAArC,GAAI,OAAIA,EAAKmB,KAAK,KAItD,MAAO,CAAEkB,QAAOO,YAHIC,OAAOC,OAAOJ,GAAcK,IAAI,SAAAV,GAAK,OAAIA,EAAMW,SAGtCC,OAFdJ,OAAOK,KAAKR","file":"component---src-pages-hello-js-a5d78d0642dcc25e1b49.js","sourcesContent":["import React from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport { UserItem } from './ExampleComponents'\n\nconst GenerateItem = index => {\n  return <UserItem user={getUser(index)} index={index} />\n}\n\nexport default () => (\n  <Virtuoso\n    totalCount={100000}\n    overscan={200}\n    item={GenerateItem}\n    style={{ height: '400px', width: '350px' }}\n  />\n)\n","import React from 'react'\nimport Layout from '../components/layout'\nimport Source from '../components/source'\nimport Example from '../examples/hello'\n\nexport default () => (\n  <Layout sidebar={() => <Source path=\"Hello\" />}>\n    <h2> 100 000 Items </h2>\n    <p>\n      The Virtuoso component is built for the display of huge lists -\n      you do not have to configure anything apart from the total item\n      count and the\n      <code>item</code> prop renderer.\n    </p>\n\n    <p>\n      The prop render callback accepts <code>index</code> parameter,\n      which specifies the absolute index of the item being rendered;\n      It is up to you to build and return the respective content for\n      it.\n    </p>\n\n    <p>\n      For a detailed overview and usage instructions, check the{' '}\n      <a href=\"https://github.com/petyosi/react-virtuoso\">\n        Github README\n      </a>\n      .\n    </p>\n    <Example />\n  </Layout>\n)\n","import faker from \"faker\"\nimport { groupBy } from \"lodash\"\n\nconst generated = []\n\nexport const getUser = index => {\n  if (!generated[index]) {\n    let firstName = faker.name.firstName()\n    let lastName = faker.name.lastName()\n    generated[index] = {\n      name: `${firstName} ${lastName}`,\n      initials: `${firstName.substr(0, 1)}${lastName.substr(0, 1)}`,\n      description: faker.company.catchPhrase(),\n      bgColor: faker.commerce.color(),\n      fgColor: faker.commerce.color(),\n      longText: faker.lorem.paragraphs(4),\n      avatar: faker.internet.avatar(),\n    }\n  }\n  return generated[index]\n}\n\nexport const generateGroupedUsers = max => {\n  const users = []\n  for (let i = 0; i < max; i++) {\n    users.push(getUser(i))\n  }\n\n  users.sort((a, b) => {\n    if (a.name < b.name) {\n      return -1\n    }\n    if (a.name > b.name) {\n      return 1\n    }\n    return 0\n  })\n\n  const groupedUsers = groupBy(users, user => user.name[0])\n  const groupCounts = Object.values(groupedUsers).map(users => users.length)\n  const groups = Object.keys(groupedUsers)\n\n  return { users, groupCounts, groups }\n}\n"],"sourceRoot":""}