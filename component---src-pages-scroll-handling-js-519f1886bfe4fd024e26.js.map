{"version":3,"sources":["webpack:///./src/examples/ScrollHandling.js","webpack:///./src/pages/scroll-handling.js","webpack:///./src/examples/FakeData.js"],"names":["ScrollHandling","_useState","useState","isScrolling","setIsScrolling","react_default","a","createElement","react_virtuoso_es_production","style","height","width","totalCount","scrollingStateChange","scrolling","console","log","item","index","user","getUser","title","name","ExampleComponents","even","backgroundColor","src","avatar","description","__webpack_exports__","layout","sidebar","source","path","generated","firstName","faker","lastName","initials","substr","company","catchPhrase","bgColor","commerce","color","fgColor","longText","lorem","paragraphs","internet","generateGroupedUsers","max","users","i","push","sort","b","groupedUsers","groupBy","groupCounts","Object","values","map","length","groups","keys"],"mappings":"4KAUeA,EAAA,WAAM,IAAAC,EACmBC,oBAAS,GAAxCC,EADYF,EAAA,GACCG,EADDH,EAAA,GAGnB,OACEI,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAO,CACLC,OAAQ,QACRC,MAAO,SAETC,WAAY,IACZC,qBAAsB,SAAAC,GACpBC,QAAQC,IAAI,CAAEF,cACdV,EAAeU,IAEjBG,KAAM,SAAAC,GACJ,IAAMC,EAAOC,YAAQF,GACfG,EAAWH,EAAQ,EAAd,KAAoBC,EAAKG,KACpC,OACEjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAiBC,KAAMN,EAAQ,GAAM,GAClCf,EACCE,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAed,MAAO,CAAEgB,gBAAiB,SAAzC,KAIApB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAkBG,IAAKP,EAAKQ,SAG9BtB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAiBF,MAAOA,GACrBF,EAAKS,kBCjCLC,EAAA,0BACbxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAQC,QAAS,kBAAM1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAQC,KAAK,qBAClC5B,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,0FAIAF,EAAAC,EAAAC,cAAA,2DACkD,IAChDF,EAAAC,EAAAC,cAAA,oCAFF,kEAGwBF,EAAAC,EAAAC,cAAA,oBAHxB,sCAG6E,IAC3EF,EAAAC,EAAAC,cAAA,qBAJF,yCAMAF,EAAAC,EAAAC,cAAA,uHAIAF,EAAAC,EAAAC,cAAA,mHAIAF,EAAAC,EAAAC,cAACP,EAAD,uLCvBEkC,EAAY,GAELd,EAAU,SAAAF,GACrB,IAAKgB,EAAUhB,GAAQ,CACrB,IAAIiB,EAAYC,IAAMd,KAAKa,YACvBE,EAAWD,IAAMd,KAAKe,WAC1BH,EAAUhB,GAAS,CACjBI,KAASa,EAAL,IAAkBE,EACtBC,SAAQ,GAAKH,EAAUI,OAAO,EAAG,GAAKF,EAASE,OAAO,EAAG,GACzDX,YAAaQ,IAAMI,QAAQC,cAC3BC,QAASN,IAAMO,SAASC,QACxBC,QAAST,IAAMO,SAASC,QACxBE,SAAUV,IAAMW,MAAMC,WAAW,GACjCrB,OAAQS,IAAMa,SAAStB,UAG3B,OAAOO,EAAUhB,IAGNgC,EAAuB,SAAAC,GAElC,IADA,IAAMC,EAAQ,GACLC,EAAI,EAAGA,EAAIF,EAAKE,IACvBD,EAAME,KAAKlC,EAAQiC,IAGrBD,EAAMG,KAAK,SAACjD,EAAGkD,GACb,OAAIlD,EAAEgB,KAAOkC,EAAElC,MACL,EAENhB,EAAEgB,KAAOkC,EAAElC,KACN,EAEF,IAGT,IAAMmC,EAAeC,kBAAQN,EAAO,SAAAjC,GAAI,OAAIA,EAAKG,KAAK,KAItD,MAAO,CAAE8B,QAAOO,YAHIC,OAAOC,OAAOJ,GAAcK,IAAI,SAAAV,GAAK,OAAIA,EAAMW,SAGtCC,OAFdJ,OAAOK,KAAKR","file":"component---src-pages-scroll-handling-js-519f1886bfe4fd024e26.js","sourcesContent":["import React, { useState } from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport {\n  ExampleListItem,\n  ExampleAvatar,\n  ExampleUserInfo,\n  ExampleImgAvatar,\n} from './ExampleComponents'\n\nexport default () => {\n  const [isScrolling, setIsScrolling] = useState(false)\n\n  return (\n    <Virtuoso\n      style={{\n        height: '400px',\n        width: '350px',\n      }}\n      totalCount={100}\n      scrollingStateChange={scrolling => {\n        console.log({ scrolling })\n        setIsScrolling(scrolling)\n      }}\n      item={index => {\n        const user = getUser(index)\n        const title = `${index + 1}. ${user.name}`\n        return (\n          <ExampleListItem even={index % 2 === 0}>\n            {isScrolling ? (\n              <ExampleAvatar style={{ backgroundColor: '#ccc' }}>\n                &nbsp;\n              </ExampleAvatar>\n            ) : (\n              <ExampleImgAvatar src={user.avatar} />\n            )}\n\n            <ExampleUserInfo title={title}>\n              {user.description}\n            </ExampleUserInfo>\n          </ExampleListItem>\n        )\n      }}\n    />\n  )\n}\n","import React from 'react';\nimport Layout from '../components/layout';\nimport Source from '../components/source';\nimport Example from '../examples/ScrollHandling';\n\nexport default () => (\n  <Layout sidebar={() => <Source path=\"ScrollHandling\" />}>\n    <h2>Handling scrolling</h2>\n    <p>\n      Loading and rendering images while scrolling ruins the scrolling\n      performance.\n    </p>\n    <p>\n      To deal with this, the Virtuoso component emits{' '}\n      <code>scrollingStateChange</code> when the user starts / stops scrolling.\n      The callback receives <code>true</code> when the user starts scrolling and{' '}\n      <code>false</code> shortly after the last scroll event.\n    </p>\n    <p>\n      Handling this event can be used to optimize performance by\n      hiding/replacing certain elements in the items.\n    </p>\n    <p>\n      In the example above, the image avatars are replaced with placeholders\n      when the user starts scrolling.\n    </p>\n    <Example />\n  </Layout>\n);\n","import faker from \"faker\"\nimport { groupBy } from \"lodash\"\n\nconst generated = []\n\nexport const getUser = index => {\n  if (!generated[index]) {\n    let firstName = faker.name.firstName()\n    let lastName = faker.name.lastName()\n    generated[index] = {\n      name: `${firstName} ${lastName}`,\n      initials: `${firstName.substr(0, 1)}${lastName.substr(0, 1)}`,\n      description: faker.company.catchPhrase(),\n      bgColor: faker.commerce.color(),\n      fgColor: faker.commerce.color(),\n      longText: faker.lorem.paragraphs(4),\n      avatar: faker.internet.avatar(),\n    }\n  }\n  return generated[index]\n}\n\nexport const generateGroupedUsers = max => {\n  const users = []\n  for (let i = 0; i < max; i++) {\n    users.push(getUser(i))\n  }\n\n  users.sort((a, b) => {\n    if (a.name < b.name) {\n      return -1\n    }\n    if (a.name > b.name) {\n      return 1\n    }\n    return 0\n  })\n\n  const groupedUsers = groupBy(users, user => user.name[0])\n  const groupCounts = Object.values(groupedUsers).map(users => users.length)\n  const groups = Object.keys(groupedUsers)\n\n  return { users, groupCounts, groups }\n}\n"],"sourceRoot":""}