{"data":{"readme":"**React Virtuoso** is a simple, easy to use React virtualized list component that can render huge data sets. \nOut of the box, Virtuoso:\n\n- Handles items with variable dynamic height; no manual measurements or hard-coding of item heights necessary;\n- Supports grouping with sticky group headers;\n- Automatically handles content resizing;\n- Can render footer at the end of the list;\n- Can pin the first `N` items to the top of the list.\n\nReact Virtuoso is as small as possible ([Bundlephobia check](https://bundlephobia.com/result?p=react-virtuoso)), \nwith a single dependency to the resize observer polyfill.\n\n## Get Started\n\nInstall the package in your React project:\n\n```sh\nnpm install react-virtuoso\n```\n\nOr, if yarn is your thing:\n\n```sh\nyarn add react-virtuoso\n```\n\nAdd the component to your application:\n\n```jsx\nimport * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport { Virtuoso } from 'react-virtuoso'\n\nconst App = () => (\n  <Virtuoso \n    style={{ width: '300px', height: '400px' }} \n    totalCount={200} \n    item={index => <div>Item {index}</div>} \n  />\n)\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n```\n\n### Footer\n\nThe component accepts an optional \n`footer` [render property](https://reactjs.org/docs/render-props.html), \nwhich is rendered after all items. \nThe footer can be used to host a \"load more\" button \nor an indicator that the user has reached the end of the list.\n\nCheck the [footer](/footer), [press load more](/press-to-load-more) and [endless scrolling](/endless-scrolling) examples for practical applications of the footer.\n\n### Pinned Items\n\nThe component accepts an optional `topItems` property, that specifies \nhow many of the items to keep \"pinned\" at the top of the list.  Check the [top items](/top-items) example.\n\n### Grouping\n\nThe package exports two components - `Virtuoso` and `GroupedVirtuoso`. \n\nThe grouped component is similar to the flat one, with the following differences:\n\n* Instead of `totalCount`, the component accepts `groupedCounts: number[]`, which specifies the amount of items in each group. \n  For example, passing `[20, 30]` will render two groups with 20 and 30 items each;\n* In addition the `item` render prop, the component requires an additional `group` render prop, \n  which renders the **group header**. The `group` callback receives the zero-based group index as a parameter;\n* The `item` render prop gets called with an additional second parameter, `groupIndex: number`.\n\nCheck the \n[grouped numbers](/grouped-numbers), \n[grouped by first letter](/grouped-by-first-letter) and \n[groups with load on demand](/grouped-with-load-on-demand) \nexamples. \n\n## Tweaking Performance\n\nSeveral factors affect the component performance. \nThe first and most important one _size of the visible area_. \nRedrawing large items takes more time and reduces the frame rate. \nTo see if this affects you, reduce the component width or height; Set the `style` property \nto something like `{{width: '200px'}}`.\n\nNext, if the content in the item prop is complex / large, \nuse [React.memo](https://reactjs.org/docs/react-api.html#reactmemo).\n\nYou can experiment with the `overscan` property which specifies \nhow much more to render in addition to the viewport visible height. \nFor example, if the component is `100px` tall, setting the `overscan` \nto `150` will cause the list to render **at least** `250px` of content. \nIn a nutshell, increasing the `overscan` causes less frequent re-renders, \nbut makes each re-render more expensive (because more items will get replaced).\n\nLoading images and displaying complex components while scrolling can cause jank. \nTo fix that, you can hook to the `scrollingStateChange` callback and replace \nthe complex content in the item render prop with a simplified one. \nCheck the [scroll handling example](/scroll-handling) for a possible implementation.\n\nFinally, as a last resort, you can speed up things by hard-coding the size of the items using the `itemHeight` property. This will cause the component to stop measuring and observing the item sizes. Be careful with that option; ensure that the items won't change size on different resolutions.\n\n## Properties of the `Virtuoso` Component\n\n### `total: number`\n\nMandatory. Specifies the total amount of items to be displayed by the list.\n\n### `item: (index: number) => ReactElement`\n\nMandatory. Specifies how each item gets rendered. The callback receives the zero-based index of the item.\n\n### `style?: CSSProperties`\n\nOptional; most often, you will need to tweak the size of the component by setting `width` and `height`.\nThe style is passed to the outermost `div` element of the component.\n\n### `footer?: () => ReactElement`\n\nOptional. Defines content to be rendered at the bottom of the list.\n\n### `overscan?: number`\n\nOptional. Causes the component to render extra content in addition to the necessary one to fill in the visible viewport.\nCheck the Tweaking Performance section.\n\n### `endReached?: (index: number) => void`\n\nGets called when the user scrolls to the end of the list.\nReceives the last item index as an argument. Can be used to implement [endless scrolling](/endless-scrolling).\n\n### `scrollingStateChange?: (isScrolling: boolean) => void`\n\nGets called when the user starts / stops scrolling. Can be used to hide complex item contents during scrolling.\n\n### `itemHeight?: number`\n\nCan be used to improve performance if the rendered items are of known size. Setting it causes the component to skip item measurements. See the Tweaking Performance section for more details.\n\n## Properties of the `GroupedVirtuoso` Component\n\n### `groupCounts: number[]`\n\nMandatory. Specifies the amount of items in each group (and, actually, how many groups are there). For example, passing `[20, 30]` will display 2 groups with 20 and 30 items each.\n\n### `item: (index: number, groupIndex: number) => ReactElement`\n\nMandatory. Specifies how each item gets rendered. The callback receives the zero-based index of the item and the index of the group of the item.\n\n### `group: (groupIndex: number) => ReactElement`\n\nMandatory. Specifies how each each group header gets rendered. The callback receives the zero-based index of the group.\n\n### `style?: CSSProperties`\n\nWorks just like the `style` property of the flat component.\n\n### `footer?: () => ReactElement`\n\nWorks just like the `footer` property of the flat component.\n\n### `overscan?: number`\n\nWorks just like the `overscan` property of the flat component.\n\n### `endReached?: (index: number) => void`\n\nWorks just like the `endReached` callback of the flat component.\n\n### `scrollingStateChange?: (isScrolling: boolean) => void`\n\nWorks just like the `scrollingStateChange` callback of the flat component.\n\n## Gotchas\n\nCSS margins in the content are the Kryptonite of Virtuoso's content measuring mechanism - the [`contentRect` measurement](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) does not include them.\n\nIf this affects you, the total scroll height will be miscalculated, and the user won't be able to scroll all the way down to the list.\n\nTo avoid that, if you are putting paragraphs and headings inside the `item`, make sure that the top / bottom elements' margins do not protrude outside of the item container.\n\n```jsx\n<Virtuoso\n  totalCount={100}\n  item={index => (\n    <div>\n      <p style={{ margin: 0 }}>Item {index}</p>\n    </div>\n  )}\n/>\n```\n\n## Browser Support\n\nVirtuoso uses `position: sticky` to keep the virtual viewport at top of the scroller.\n[This does not work in IE 11](https://caniuse.com/#feat=css-sticky).\nPlease open an issue (or even, PR) if you need this - it should be possible to implement a fallback mechanism using `position: absolute`.\n"},"pageContext":{"isCreatedByStatefulCreatePages":true}}