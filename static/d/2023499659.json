{"data":{"allSources":[{"key":"AutoResizing","source":"import React from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport {\n  ExampleListItem,\n  ExampleAvatar,\n  ExampleUserInfo,\n} from './ExampleComponents'\n\nexport default () => (\n  <Virtuoso\n    style={{ width: '100%', height: '400px' }}\n    totalCount={100}\n    item={index => {\n      const user = getUser(index)\n      const title = `${index + 1}. ${user.name}`\n      return (\n        <ExampleListItem even={index % 2 === 0}>\n          <ExampleAvatar\n            style={{\n              color: user.fgColor,\n              backgroundColor: user.bgColor,\n            }}\n          >\n            {user.initials}\n          </ExampleAvatar>\n          <ExampleUserInfo title={title}>\n            {user.longText}\n          </ExampleUserInfo>\n        </ExampleListItem>\n      )\n    }}\n    footer={() => (\n      <div style={{ padding: '1rem', textAlign: 'center' }}>\n        -- end reached --\n      </div>\n    )}\n  />\n)\n"},{"key":"EndlessScrolling","source":"import React, {\n  useState,\n  useRef,\n  useCallback,\n  useEffect,\n} from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport { UserItem } from './ExampleComponents'\n\nconst GenerateItem = index => {\n  return <UserItem user={getUser(index)} index={index} />\n}\n\nexport default () => {\n  const [total, setTotal] = useState(0)\n  const items = useRef([])\n  const loading = useRef(false)\n\n  // the setTimeout below simulates a network request.\n  // In the real world, you can fetch data from a service.\n  // the setTotal call will trigger a refresh for the list,\n  // so make sure you call it last\n  const loadMore = useCallback(() => {\n    if (loading.current) {\n      return\n    }\n    loading.current = true\n\n    setTimeout(() => {\n      for (let index = total; index < total + total + 20; index++) {\n        items.current = [...items.current, getUser(index)]\n      }\n      loading.current = false\n      setTotal(items.current.length)\n    }, 500)\n  }, [])\n\n  useEffect(() => {\n    loadMore()\n  }, [])\n\n  return (\n    <Virtuoso\n      style={{ width: '350px', height: '400px' }}\n      overscan={500}\n      totalCount={total}\n      item={GenerateItem}\n      endReached={() => loadMore()}\n      footer={() => {\n        return (\n          <div style={{ padding: '2rem', textAlign: 'center' }}>\n            Loading...\n          </div>\n        )\n      }}\n    />\n  )\n}\n"},{"key":"ExampleComponents","source":"import styled from 'styled-components'\nimport React from 'react'\nimport { FC } from 'react'\n\nexport const ExampleAvatar = styled.div`\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  text-align: center;\n  line-height: 50px;\n  flex: none;\n  font-weight: bold;\n  font-size: 1.2em;\n`\n\nexport const ExampleImgAvatar = styled.img`\n  width: 50px;\n  height: 50px;\n  flex: none;\n  border-radius: 50%;\n  margin: 0;\n`\n\nexport const ExampleAvatarPlaceholder = styled.div`\n  width: 50px;\n  height: 50px;\n  flex: none;\n`\nexport const ExampleListItem = styled.div`\n  background-color: ${props => (props.even ? '#fff' : '#f4f4f4')};\n  border-radius: 3px;\n  display: flex;\n  padding: 1rem;\n  color: #333;\n`\n\nexport const ExampleGroup = styled.div`\n  background-color: rgba(200, 200, 200, 0.8);\n  color: #333;\n  padding: 1rem;\n  font-weight: bold;\n`\n\nexport const ExampleUserInfo = ({ title, children }) => {\n  return (\n    <div style={{ marginLeft: '1rem' }}>\n      <h3 style={{ marginTop: 0 }}>{title}</h3>\n      <p style={{ marginBottom: 0 }}>{children}</p>\n    </div>\n  )\n}\n\nexport const UserItem = ({ user, index }) => {\n  const title = `${index + 1}. ${user.name}`\n  return (\n    <ExampleListItem even={index % 2 === 0}>\n      <ExampleAvatar\n        style={{ color: user.fgColor, backgroundColor: user.bgColor }}\n      >\n        {user.initials}\n      </ExampleAvatar>\n      <ExampleUserInfo title={title}>\n        {user.description}\n      </ExampleUserInfo>\n    </ExampleListItem>\n  )\n}\n"},{"key":"FakeData","source":"import faker from \"faker\"\nimport { groupBy } from \"lodash\"\n\nconst generated = []\n\nexport const getUser = index => {\n  if (!generated[index]) {\n    let firstName = faker.name.firstName()\n    let lastName = faker.name.lastName()\n    generated[index] = {\n      name: `${firstName} ${lastName}`,\n      initials: `${firstName.substr(0, 1)}${lastName.substr(0, 1)}`,\n      description: faker.company.catchPhrase(),\n      bgColor: faker.commerce.color(),\n      fgColor: faker.commerce.color(),\n      longText: faker.lorem.paragraphs(4),\n      avatar: faker.internet.avatar(),\n    }\n  }\n  return generated[index]\n}\n\nexport const generateGroupedUsers = max => {\n  const users = []\n  for (let i = 0; i < max; i++) {\n    users.push(getUser(i))\n  }\n\n  users.sort((a, b) => {\n    if (a.name < b.name) {\n      return -1\n    }\n    if (a.name > b.name) {\n      return 1\n    }\n    return 0\n  })\n\n  const groupedUsers = groupBy(users, user => user.name[0])\n  const groupCounts = Object.values(groupedUsers).map(users => users.length)\n  const groups = Object.keys(groupedUsers)\n\n  return { users, groupCounts, groups }\n}\n"},{"key":"Footer","source":"import React from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport { UserItem } from './ExampleComponents'\n\nconst GenerateItem = index => {\n  return <UserItem user={getUser(index)} index={index} />\n}\n\nexport default () => (\n  <Virtuoso\n    style={{ height: '350px', width: '400px' }}\n    totalCount={100}\n    item={GenerateItem}\n    footer={() => (\n      <div style={{ padding: '1rem', textAlign: 'center' }}>\n        -- end reached --\n      </div>\n    )}\n  />\n)\n"},{"key":"GroupWithLoadOnDemand","source":"import React, {\n  useEffect,\n  useCallback,\n  useState,\n  useMemo,\n  useRef,\n} from 'react'\nimport { GroupedVirtuoso } from 'react-virtuoso'\nimport { generateGroupedUsers } from './FakeData'\nimport { ExampleGroup, UserItem } from './ExampleComponents'\n\n// Slices the total groups to the groups\n// which contain the items so far\n// for example, if you have [10, 10, 10, 10]\n// groups in total, slicing them to 23 will result in [10, 10, 3]\nconst calculateGroupsSoFar = (totalGroups, count) => {\n  const groups = []\n  let i = 0\n  do {\n    const group = totalGroups[i]\n    groups.push(Math.min(group, count))\n    count -= group\n    i++\n  } while (count > 0 && i <= totalGroups.length)\n  return groups\n}\n\nexport default () => {\n  const { users, groups, groupCounts } = useMemo(\n    () => generateGroupedUsers(500),\n    []\n  )\n\n  const [currentGroupCounts, setCurrentGroupCounts] = useState([])\n  const loadedItems = useRef(0)\n  const [loading, setLoading] = useState(false)\n\n  const loadMore = useCallback(() => {\n    setLoading(true)\n\n    // the set timeout call is just for example purposes.\n    // In the real world,\n    // this can fetch and append data from a remote server.\n    setTimeout(() => {\n      loadedItems.current += 50\n      setLoading(false)\n      setCurrentGroupCounts(\n        calculateGroupsSoFar(groupCounts, loadedItems.current)\n      )\n    }, 500)\n  }, [])\n\n  useEffect(loadMore, [])\n\n  return (\n    <GroupedVirtuoso\n      style={{ height: '350px', width: '400px' }}\n      groupCounts={currentGroupCounts}\n      group={index => (\n        <ExampleGroup>Group {groups[index]}</ExampleGroup>\n      )}\n      item={index => <UserItem user={users[index]} index={index} />}\n      footer={() => {\n        return (\n          <div\n            style={{\n              padding: '2rem',\n              display: 'flex',\n              justifyContent: 'center',\n            }}\n          >\n            <button disabled={loading} onClick={loadMore}>\n              {loading ? 'Loading...' : 'Press to load more'}\n            </button>\n          </div>\n        )\n      }}\n    />\n  )\n}\n"},{"key":"GroupedByFirstLetter","source":"import React from 'react'\nimport { GroupedVirtuoso } from 'react-virtuoso'\nimport { generateGroupedUsers } from './FakeData'\nimport { ExampleGroup, UserItem } from './ExampleComponents'\n\nexport default () => {\n  // the generateGroupedUsers is a dummy implementation\n  // that builds grouped data\n  // the users variable contains 500 user records, sorted by name\n  // the groups variable contains the first\n  // letter groups -> ['A', 'B', 'C'], etc.\n  // finally, the groupCounts specifies how many items each\n  // group has -> [ 20, 30, 15, 10 ], etc.\n  const { users, groups, groupCounts } = generateGroupedUsers(500)\n\n  return (\n    <GroupedVirtuoso\n      style={{ height: '350px', width: '400px' }}\n      groupCounts={groupCounts}\n      group={index => {\n        return <ExampleGroup>{groups[index]}</ExampleGroup>\n      }}\n      item={index => {\n        return <UserItem user={users[index]} index={index} />\n      }}\n    />\n  )\n}\n"},{"key":"GroupedNumbers","source":"import React from 'react'\nimport { GroupedVirtuoso } from 'react-virtuoso'\nimport {\n  ExampleGroup,\n  ExampleListItem,\n  ExampleUserInfo,\n} from './ExampleComponents'\n\nexport default () => {\n  const groupCounts = []\n  for (let index = 0; index < 1000; index++) {\n    groupCounts.push(10)\n  }\n\n  return (\n    <GroupedVirtuoso\n      style={{ height: '400px', width: '350px' }}\n      groupCounts={groupCounts}\n      group={index => {\n        return (\n          <ExampleGroup>\n            Group {index * 10} &ndash; {index * 10 + 10}\n          </ExampleGroup>\n        )\n      }}\n      item={(index, groupIndex) => {\n        return (\n          <ExampleListItem even={index % 2 === 0}>\n            <ExampleUserInfo title={`Number ${index}`}>\n              {index} (group {groupIndex})\n            </ExampleUserInfo>\n          </ExampleListItem>\n        )\n      }}\n    />\n  )\n}\n"},{"key":"Hello","source":"import React from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport { UserItem } from './ExampleComponents'\n\nconst GenerateItem = index => {\n  return <UserItem user={getUser(index)} index={index} />\n}\n\nexport default () => (\n  <Virtuoso\n    totalCount={100000}\n    overscan={200}\n    item={GenerateItem}\n    style={{ height: '400px', width: '350px' }}\n  />\n)\n"},{"key":"PressToLoadMore","source":"import React, {\n  useState,\n  useRef,\n  useCallback,\n  useEffect,\n} from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport { UserItem } from './ExampleComponents'\n\nconst GenerateItem = index => {\n  return <UserItem user={getUser(index)} index={index} />\n}\n\nexport default () => {\n  const [total, setTotal] = useState(0)\n  const items = useRef([])\n  const [loading, setLoading] = useState(false)\n\n  // the setTimeout below simulates a network request.\n  // In the real world, you can fetch data from a service.\n  // the setTotal call will trigger a refresh for the list,\n  // so make sure you call it last.\n  const loadMore = useCallback(() => {\n    setLoading(true)\n\n    setTimeout(() => {\n      for (let index = total; index < total + total + 20; index++) {\n        items.current = [...items.current, getUser(index)]\n      }\n      setLoading(false)\n      setTotal(items.current.length)\n    }, 500)\n  }, [])\n\n  useEffect(() => {\n    loadMore()\n  }, [])\n\n  return (\n    <Virtuoso\n      style={{ width: '350px', height: '400px' }}\n      totalCount={total}\n      item={GenerateItem}\n      footer={() => {\n        return (\n          <div\n            style={{\n              padding: '2rem',\n              display: 'flex',\n              justifyContent: 'center',\n            }}\n          >\n            <button disabled={loading} onClick={loadMore}>\n              {loading ? 'Loading...' : 'Press to load more'}\n            </button>\n          </div>\n        )\n      }}\n    />\n  )\n}\n"},{"key":"ScrollHandling","source":"import React, { useState } from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport {\n  ExampleListItem,\n  ExampleAvatar,\n  ExampleUserInfo,\n  ExampleImgAvatar,\n} from './ExampleComponents'\n\nexport default () => {\n  const [isScrolling, setIsScrolling] = useState(false)\n\n  return (\n    <Virtuoso\n      style={{\n        height: '400px',\n        width: '350px',\n      }}\n      totalCount={100}\n      scrollingStateChange={scrolling => {\n        setIsScrolling(scrolling)\n      }}\n      item={index => {\n        const user = getUser(index)\n        const title = `${index + 1}. ${user.name}`\n        return (\n          <ExampleListItem even={index % 2 === 0}>\n            {isScrolling ? (\n              <ExampleAvatar style={{ backgroundColor: '#ccc' }}>\n                &nbsp;\n              </ExampleAvatar>\n            ) : (\n              <ExampleImgAvatar src={user.avatar} />\n            )}\n\n            <ExampleUserInfo title={title}>\n              {user.description}\n            </ExampleUserInfo>\n          </ExampleListItem>\n        )\n      }}\n    />\n  )\n}\n"},{"key":"TopItems","source":"import React from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport { UserItem } from './ExampleComponents'\n\nconst GenerateItem = index => {\n  return <UserItem user={getUser(index)} index={index} />\n}\n\nexport default () => (\n  <Virtuoso\n    totalCount={100000}\n    overscan={200}\n    topItems={2}\n    item={GenerateItem}\n    style={{ height: '400px', width: '350px' }}\n  />\n)\n"}]}}