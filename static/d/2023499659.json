{"data":{"allSources":[{"key":"AutoResizing","source":"import React from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport {\n  ExampleListItem,\n  ExampleAvatar,\n  ExampleUserInfo,\n} from './ExampleComponents'\n\nexport default () => (\n  <Virtuoso\n    style={{ width: '100%', height: '400px' }}\n    totalCount={100}\n    item={index => {\n      const user = getUser(index)\n      const title = `${index + 1}. ${user.name}`\n      return (\n        <ExampleListItem even={index % 2 === 0}>\n          <ExampleAvatar\n            style={{\n              color: user.fgColor,\n              backgroundColor: user.bgColor,\n            }}\n          >\n            {user.initials}\n          </ExampleAvatar>\n          <ExampleUserInfo title={title}>\n            {user.longText}\n          </ExampleUserInfo>\n        </ExampleListItem>\n      )\n    }}\n    footer={() => (\n      <div style={{ padding: '1rem', textAlign: 'center' }}>\n        -- end reached --\n      </div>\n    )}\n  />\n)\n"},{"key":"CustomScrollContainer","source":"import React, { useRef } from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport { UserItem } from './ExampleComponents'\n\nconst GenerateItem = index => {\n  return <UserItem user={getUser(index)} index={index} />\n}\n\n// className is string | undefined, passed from\n// the root component\n//\n// style is CSSProperties, setting the size and the\n// overflow of the element. You may have to discard\n// some of those if setting up a custom scroller.\n//\n// scrollTo is an event emitter, which executes\n// the callback when the scrollToIndex method is called\n//\n// reportScrollTop should be wired up to the onScroll event,\n// passing the current scrollTop position\nconst MyScrollContainer = ({\n  className,\n  style,\n  reportScrollTop,\n  scrollTo,\n  children,\n}) => {\n  const elRef = useRef(null)\n\n  scrollTo(scrollTop => {\n    elRef.scrollTo({ top: scrollTop })\n  })\n\n  return (\n    <div\n      ref={elRef}\n      onScroll={e => reportScrollTop(e.target.scrollTop)}\n      style={{\n        ...style,\n        border: '5px dashed gray',\n        borderRadius: '4px',\n      }}\n      tabIndex={0}\n      className={className}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport default () => (\n  <Virtuoso\n    ScrollContainer={MyScrollContainer}\n    totalCount={1000}\n    overscan={200}\n    item={GenerateItem}\n    style={{ height: '400px', width: '350px' }}\n  />\n)\n"},{"key":"CustomizeStructure","source":"import React from 'react'\nimport { GroupedVirtuoso } from 'react-virtuoso'\n\nconst ListContainer = ({ listRef, children, className, style }) => (\n  <ul\n    ref={listRef}\n    className={className}\n    style={{ ...style, marginBottom: 0 }}\n  >\n    {children}\n  </ul>\n)\n\nconst ItemContainer = props => <li {...props} style={{ margin: 0 }} />\n\nconst GroupContainer = ({ children, style, ...props }) => (\n  <li\n    {...props}\n    style={{ ...style, marginBottom: 0, backgroundColor: 'white' }}\n  >\n    <strong>{children}</strong>\n    <hr />\n  </li>\n)\n\nconst FooterContainer = ({ children, footerRef }) => (\n  <li ref={footerRef} style={{ margin: 0 }}>\n    <hr />\n    {children}\n  </li>\n)\n\nexport default () => (\n  <GroupedVirtuoso\n    ListContainer={ListContainer}\n    ItemContainer={ItemContainer}\n    GroupContainer={GroupContainer}\n    FooterContainer={FooterContainer}\n    groupCounts={[10, 10, 10, 10, 10, 10]}\n    item={index => <>Item {index}</>}\n    group={index => <>Group {index}</>}\n    footer={() => <>End</>}\n    style={{ height: '400px', width: '350px' }}\n  />\n)\n"},{"key":"EndlessScrolling","source":"import React, {\n  useState,\n  useRef,\n  useCallback,\n  useEffect,\n} from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport { UserItem } from './ExampleComponents'\n\nconst GenerateItem = index => {\n  return <UserItem user={getUser(index)} index={index} />\n}\n\nexport default () => {\n  const [total, setTotal] = useState(0)\n  const items = useRef([])\n  const loading = useRef(false)\n\n  // the setTimeout below simulates a network request.\n  // In the real world, you can fetch data from a service.\n  // the setTotal call will trigger a refresh for the list,\n  // so make sure you call it last\n  const loadMore = useCallback(() => {\n    if (loading.current) {\n      return\n    }\n    loading.current = true\n\n    setTimeout(() => {\n      for (let index = total; index < total + total + 20; index++) {\n        items.current = [...items.current, getUser(index)]\n      }\n      loading.current = false\n      setTotal(items.current.length)\n    }, 500)\n  }, [])\n\n  useEffect(() => {\n    loadMore()\n  }, [])\n\n  return (\n    <Virtuoso\n      style={{ width: '350px', height: '400px' }}\n      overscan={500}\n      totalCount={total}\n      item={GenerateItem}\n      endReached={() => loadMore()}\n      footer={() => {\n        return (\n          <div style={{ padding: '2rem', textAlign: 'center' }}>\n            Loading...\n          </div>\n        )\n      }}\n    />\n  )\n}\n"},{"key":"ExampleComponents","source":"import styled from 'styled-components'\nimport React from 'react'\nimport { FC } from 'react'\n\nexport const ExampleAvatar = styled.div`\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  text-align: center;\n  line-height: 50px;\n  flex: none;\n  font-weight: bold;\n  font-size: 1.2em;\n`\n\nexport const ExampleImgAvatar = styled.img`\n  width: 50px;\n  height: 50px;\n  flex: none;\n  border-radius: 50%;\n  margin: 0;\n`\n\nexport const ExampleAvatarPlaceholder = styled.div`\n  width: 50px;\n  height: 50px;\n  flex: none;\n`\nexport const ExampleListItem = styled.div`\n  background-color: ${props => (props.even ? '#fff' : '#f4f4f4')};\n  border-radius: 3px;\n  display: flex;\n  padding: 12px;\n  color: #333;\n  font-size: 14px;\n`\n\nexport const ExampleGroup = styled.div`\n  background-color: rgba(200, 200, 200, 0.8);\n  color: #333;\n  padding: 9px;\n  font-weight: bold;\n`\n\nexport const ExampleUserInfo = ({ title, children }) => {\n  return (\n    <div style={{ marginLeft: '1rem' }}>\n      <h3 style={{ marginTop: 0, marginBottom: '10px' }}>{title}</h3>\n      <p style={{ marginBottom: 0 }}>{children}</p>\n    </div>\n  )\n}\n\nexport const UserItem = ({ user, index }) => {\n  const title = `${index + 1}. ${user.name}`\n  return (\n    <ExampleListItem even={index % 2 === 0}>\n      <ExampleAvatar\n        style={{ color: user.fgColor, backgroundColor: user.bgColor }}\n      >\n        {user.initials}\n      </ExampleAvatar>\n      <ExampleUserInfo title={title}>\n        {user.description}\n      </ExampleUserInfo>\n    </ExampleListItem>\n  )\n}\n"},{"key":"FakeData","source":"import faker from \"faker\"\nimport { groupBy } from \"lodash\"\n\nconst generated = []\n\nexport const getUser = index => {\n  if (!generated[index]) {\n    let firstName = faker.name.firstName()\n    let lastName = faker.name.lastName()\n    generated[index] = {\n      name: `${firstName} ${lastName}`,\n      initials: `${firstName.substr(0, 1)}${lastName.substr(0, 1)}`,\n      description: faker.company.catchPhrase(),\n      bgColor: faker.commerce.color(),\n      fgColor: faker.commerce.color(),\n      longText: faker.lorem.paragraphs(4),\n      avatar: faker.internet.avatar(),\n    }\n  }\n  return generated[index]\n}\n\nexport const generateGroupedUsers = max => {\n  const users = []\n  for (let i = 0; i < max; i++) {\n    users.push(getUser(i))\n  }\n\n  users.sort((a, b) => {\n    if (a.name < b.name) {\n      return -1\n    }\n    if (a.name > b.name) {\n      return 1\n    }\n    return 0\n  })\n\n  const groupedUsers = groupBy(users, user => user.name[0])\n  const groupCounts = Object.values(groupedUsers).map(users => users.length)\n  const groups = Object.keys(groupedUsers)\n\n  return { users, groupCounts, groups }\n}\n"},{"key":"Footer","source":"import React from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport { UserItem } from './ExampleComponents'\n\nconst GenerateItem = index => {\n  return <UserItem user={getUser(index)} index={index} />\n}\n\nexport default () => (\n  <Virtuoso\n    style={{ height: '350px', width: '400px' }}\n    totalCount={100}\n    item={GenerateItem}\n    footer={() => (\n      <div style={{ padding: '1rem', textAlign: 'center' }}>\n        -- end reached --\n      </div>\n    )}\n  />\n)\n"},{"key":"GridResponsiveColumns","source":"import React from 'react'\nimport styled from '@emotion/styled'\nimport { VirtuosoGrid } from 'react-virtuoso'\n\nconst ItemContainer = styled.div`\n  padding: 0.5rem;\n  width: 25%;\n  background: #f5f5f5;\n  display: flex;\n  flex: none;\n  align-content: stretch;\n\n  @media (max-width: 1024px) {\n    width: 33%;\n  }\n\n  @media (max-width: 768px) {\n    width: 50%;\n  }\n\n  @media (max-width: 480px) {\n    width: 100%;\n  }\n`\n\nconst ItemWrapper = styled.div`\n    flex: 1;\n    text-align: center;\n    font-size: 80%;\n    padding: 2rem;\n    box-shadow: 0 5px 6px -6px #777;\n    background: white;\n  }\n`\n\nconst ListContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`\n\nexport default () => (\n  <VirtuosoGrid\n    totalCount={10000}\n    overscan={200}\n    ItemContainer={ItemContainer}\n    ListContainer={ListContainer}\n    item={index => <ItemWrapper>Item {index}</ItemWrapper>}\n    style={{ height: '500px', width: '100%' }}\n  />\n)\n"},{"key":"GroupWithLoadOnDemand","source":"import React, {\n  useEffect,\n  useCallback,\n  useState,\n  useMemo,\n  useRef,\n} from 'react'\nimport { GroupedVirtuoso } from 'react-virtuoso'\nimport { generateGroupedUsers } from './FakeData'\nimport { ExampleGroup, UserItem } from './ExampleComponents'\n\n// Slices the total groups to the groups\n// which contain the items so far\n// for example, if you have [10, 10, 10, 10]\n// groups in total, slicing them to 23 will result in [10, 10, 3]\nconst calculateGroupsSoFar = (totalGroups, count) => {\n  const groups = []\n  let i = 0\n  do {\n    const group = totalGroups[i]\n    groups.push(Math.min(group, count))\n    count -= group\n    i++\n  } while (count > 0 && i <= totalGroups.length)\n  return groups\n}\n\nexport default () => {\n  const { users, groups, groupCounts } = useMemo(\n    () => generateGroupedUsers(500),\n    []\n  )\n\n  const [currentGroupCounts, setCurrentGroupCounts] = useState([])\n  const loadedItems = useRef(0)\n  const [loading, setLoading] = useState(false)\n\n  const loadMore = useCallback(() => {\n    setLoading(true)\n\n    // the set timeout call is just for example purposes.\n    // In the real world,\n    // this can fetch and append data from a remote server.\n    setTimeout(() => {\n      loadedItems.current += 50\n      setLoading(false)\n      setCurrentGroupCounts(\n        calculateGroupsSoFar(groupCounts, loadedItems.current)\n      )\n    }, 500)\n  }, [])\n\n  useEffect(loadMore, [])\n\n  return (\n    <GroupedVirtuoso\n      style={{ height: '350px', width: '400px' }}\n      groupCounts={currentGroupCounts}\n      group={index => (\n        <ExampleGroup>Group {groups[index]}</ExampleGroup>\n      )}\n      item={index => <UserItem user={users[index]} index={index} />}\n      footer={() => {\n        return (\n          <div\n            style={{\n              padding: '2rem',\n              display: 'flex',\n              justifyContent: 'center',\n            }}\n          >\n            <button disabled={loading} onClick={loadMore}>\n              {loading ? 'Loading...' : 'Press to load more'}\n            </button>\n          </div>\n        )\n      }}\n    />\n  )\n}\n"},{"key":"GroupedByFirstLetter","source":"import React from 'react'\nimport { GroupedVirtuoso } from 'react-virtuoso'\nimport { generateGroupedUsers } from './FakeData'\nimport { ExampleGroup, UserItem } from './ExampleComponents'\n\nexport default () => {\n  // the generateGroupedUsers is a dummy implementation\n  // that builds grouped data\n  // the users variable contains 500 user records, sorted by name\n  // the groups variable contains the first\n  // letter groups -> ['A', 'B', 'C'], etc.\n  // finally, the groupCounts specifies how many items each\n  // group has -> [ 20, 30, 15, 10 ], etc.\n  const { users, groups, groupCounts } = generateGroupedUsers(500)\n\n  return (\n    <GroupedVirtuoso\n      style={{ height: '350px', width: '400px' }}\n      groupCounts={groupCounts}\n      group={index => {\n        return <ExampleGroup>{groups[index]}</ExampleGroup>\n      }}\n      item={index => {\n        return <UserItem user={users[index]} index={index} />\n      }}\n    />\n  )\n}\n"},{"key":"GroupedNumbers","source":"import React from 'react'\nimport { GroupedVirtuoso } from 'react-virtuoso'\nimport {\n  ExampleGroup,\n  ExampleListItem,\n  ExampleUserInfo,\n} from './ExampleComponents'\n\nexport default () => {\n  const groupCounts = []\n  for (let index = 0; index < 1000; index++) {\n    groupCounts.push(10)\n  }\n\n  return (\n    <GroupedVirtuoso\n      style={{ height: '400px', width: '350px' }}\n      groupCounts={groupCounts}\n      group={index => {\n        return (\n          <ExampleGroup>\n            Group {index * 10} &ndash; {index * 10 + 10}\n          </ExampleGroup>\n        )\n      }}\n      item={(index, groupIndex) => {\n        return (\n          <ExampleListItem even={index % 2 === 0}>\n            <ExampleUserInfo title={`Number ${index}`}>\n              {index} (group {groupIndex})\n            </ExampleUserInfo>\n          </ExampleListItem>\n        )\n      }}\n    />\n  )\n}\n"},{"key":"Hello","source":"import React from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport { UserItem } from './ExampleComponents'\n\nconst GenerateItem = index => {\n  return <UserItem user={getUser(index)} index={index} />\n}\n\nexport default () => (\n  <Virtuoso\n    totalCount={100000}\n    overscan={200}\n    item={GenerateItem}\n    style={{ height: '400px', width: '350px' }}\n  />\n)\n"},{"key":"InitialIndex","source":"import React from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { UserItem } from './ExampleComponents'\nimport { getUser } from './FakeData'\n\nconst GenerateItem = index => {\n  return <UserItem user={getUser(index)} index={index} />\n}\n\nexport default () => {\n  // set the initialTopMostItemIndex to 999 to have the list start at the bottom\n  return (\n    <div>\n      <Virtuoso\n        totalCount={1000}\n        overscan={200}\n        initialTopMostItemIndex={799}\n        item={GenerateItem}\n        style={{ height: '400px', width: '350px' }}\n      />\n    </div>\n  )\n}\n"},{"key":"MaterialUI","source":"import React, { useMemo, useState, useRef, useEffect } from 'react'\nimport { GroupedVirtuoso } from 'react-virtuoso'\nimport { makeStyles } from '@material-ui/core/styles'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListSubheader from '@material-ui/core/ListSubheader'\nimport faker from 'faker'\nimport { groupBy } from 'lodash'\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar'\nimport Avatar from '@material-ui/core/Avatar'\n\nconst getUser = () => {\n  let firstName = faker.name.firstName()\n  let lastName = faker.name.lastName()\n  return {\n    name: `${firstName} ${lastName}`,\n    initials: `${firstName.substr(0, 1)}${lastName.substr(0, 1)}`,\n    description: faker.company.catchPhrase(),\n    avatar: faker.internet.avatar(),\n  }\n}\n\nconst sortUser = (a, b) => {\n  if (a.name < b.name) {\n    return -1\n  }\n  if (a.name > b.name) {\n    return 1\n  }\n  return 0\n}\n\nconst useGroupedUsers = count => {\n  const allUsers = useMemo(\n    () =>\n      new Array(count)\n        .fill(true)\n        .map(getUser)\n        .sort(sortUser),\n    [count]\n  )\n\n  const loadedCount = useRef(0)\n  const loadedUsers = useRef([])\n  const groups = useRef([])\n  const [endReached, setEndReached] = useState(false)\n  const [groupCounts, setGroupCounts] = useState([])\n\n  const loadMore = () => {\n    if (!endReached) {\n      setTimeout(() => {\n        loadedCount.current += 50\n\n        // in a real world scenario, you would fetch the next\n        // slice and append it to the existing records\n        loadedUsers.current = allUsers.slice(0, loadedCount.current)\n\n        // the code below calculates the group counts\n        // for the users loaded so far;\n        // this should be performed on the server too\n        const groupedUsers = groupBy(\n          loadedUsers.current,\n          user => user.name[0]\n        )\n        groups.current = Object.keys(groupedUsers)\n        setGroupCounts(\n          Object.values(groupedUsers).map(users => users.length)\n        )\n\n        if (loadedCount.current === 500) {\n          setEndReached(true)\n        }\n      }, 500)\n    }\n  }\n\n  return {\n    loadMore,\n    endReached,\n    groupCounts,\n    users: loadedUsers.current,\n    groups: groups.current,\n  }\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: '8px',\n  },\n  list: {\n    margin: 0,\n    padding: 0,\n  },\n  text: {\n    margin: 0,\n    padding: '4px 0',\n  },\n  header: {\n    backgroundColor: theme.palette.background.paper,\n  },\n  inline: {\n    display: 'inline',\n  },\n  avatarPlaceholder: {\n    borderRadius: '50%',\n    width: '40px',\n    height: '40px',\n    border: `1px solid ${theme.palette.grey[400]}`,\n    lineHeight: '40px',\n    textAlign: 'center',\n  },\n}))\n\nexport default () => {\n  const [isScrolling, setIsScrolling] = useState(false)\n\n  const {\n    loadMore,\n    endReached,\n    groupCounts,\n    users,\n    groups,\n  } = useGroupedUsers(500)\n\n  useEffect(loadMore, [])\n  const classes = useStyles()\n\n  return (\n    <GroupedVirtuoso\n      FooterContainer={({ footerRef, children }) => (\n        <ListItem ref={footerRef}>{children}</ListItem>\n      )}\n      ListContainer={({ listRef, className, style, children }) => {\n        return (\n          <List\n            ref={listRef}\n            style={style}\n            className={[className, classes.list].join(' ')}\n          >\n            {children}\n          </List>\n        )\n      }}\n      ItemContainer={({ children, ...props }) => {\n        return (\n          <ListItem {...props} style={{ margin: 0 }}>\n            {children}\n          </ListItem>\n        )\n      }}\n      GroupContainer={({ children, className, style, ...props }) => (\n        <ListSubheader\n          {...props}\n          className={[className, classes.header].join(' ')}\n          disableSticky={true}\n          style={{ ...style, marginBottom: 0 }}\n        >\n          {children}\n        </ListSubheader>\n      )}\n      className={classes.root}\n      style={{ height: '350px', width: '400px' }}\n      groupCounts={groupCounts}\n      group={index => <div>Group {groups[index]}</div>}\n      endReached={loadMore}\n      overscan={400}\n      scrollingStateChange={_ => {\n        // setIsScrolling(scrolling)\n      }}\n      item={index => (\n        <>\n          <ListItemAvatar>\n            {isScrolling ? (\n              <div className={classes.avatarPlaceholder}>\n                {users[index].initials}\n              </div>\n            ) : (\n              <>\n                <Avatar\n                  alt={`Avatar n°${index + 1}`}\n                  src={users[index].avatar}\n                />\n              </>\n            )}\n          </ListItemAvatar>\n          <ListItemText\n            primary={`${users[index].name}`}\n            secondary={<span>{users[index].description}</span>}\n            className={classes.text}\n          />\n        </>\n      )}\n      footer={() => {\n        return endReached ? (\n          <div>-- end --</div>\n        ) : (\n          <div>Loading...</div>\n        )\n      }}\n    />\n  )\n}\n"},{"key":"PrependItems","source":"import React, { useState, useRef, useCallback } from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport { UserItem } from './ExampleComponents'\n\nexport default () => {\n  const virtuoso = useRef(null)\n  const initialIndexOffset = useRef(10000)\n  const [users, setUsers] = useState(\n    Array(200)\n      .fill(true)\n      .map((_, index) => getUser(10000 + index))\n  )\n\n  const prependItems = useCallback(() => {\n    const usersToPrepend = 100\n    initialIndexOffset.current -= usersToPrepend\n    setUsers([\n      ...Array(usersToPrepend)\n        .fill(true)\n        .map((_, index) =>\n          getUser(initialIndexOffset.current + index)\n        ),\n      ...users,\n    ])\n    virtuoso.current.adjustForPrependedItems(usersToPrepend)\n    return false\n  }, [initialIndexOffset, users, setUsers])\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <div>\n        <Virtuoso\n          ref={virtuoso}\n          totalCount={users.length}\n          item={index => (\n            <UserItem user={users[index]} index={index} />\n          )}\n          style={{ height: '400px', width: '350px' }}\n        />\n      </div>\n      <div>\n        <ul className=\"knobs\">\n          <li>\n            <button onClick={prependItems}>Prepend 100 items</button>\n          </li>\n        </ul>\n      </div>\n    </div>\n  )\n}\n"},{"key":"PressToLoadMore","source":"import React, {\n  useState,\n  useRef,\n  useCallback,\n  useEffect,\n} from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport { UserItem } from './ExampleComponents'\n\nconst GenerateItem = index => {\n  return <UserItem user={getUser(index)} index={index} />\n}\n\nexport default () => {\n  const [total, setTotal] = useState(0)\n  const items = useRef([])\n  const [loading, setLoading] = useState(false)\n\n  // the setTimeout below simulates a network request.\n  // In the real world, you can fetch data from a service.\n  // the setTotal call will trigger a refresh for the list,\n  // so make sure you call it last.\n  const loadMore = useCallback(() => {\n    setLoading(true)\n\n    setTimeout(() => {\n      for (let index = total; index < total + total + 20; index++) {\n        items.current = [...items.current, getUser(index)]\n      }\n      setLoading(false)\n      setTotal(items.current.length)\n    }, 500)\n  }, [])\n\n  useEffect(() => {\n    loadMore()\n  }, [])\n\n  return (\n    <Virtuoso\n      style={{ width: '350px', height: '400px' }}\n      totalCount={total}\n      item={GenerateItem}\n      footer={() => {\n        return (\n          <div\n            style={{\n              padding: '2rem',\n              display: 'flex',\n              justifyContent: 'center',\n            }}\n          >\n            <button disabled={loading} onClick={loadMore}>\n              {loading ? 'Loading...' : 'Press to load more'}\n            </button>\n          </div>\n        )\n      }}\n    />\n  )\n}\n"},{"key":"RangeChanged","source":"import React, { useState } from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport { UserItem } from './ExampleComponents'\n\nconst GenerateItem = index => {\n  return <UserItem user={getUser(index)} index={index} />\n}\n\nexport default () => {\n  const [visibleRange, setVisibleRange] = useState([0, 0])\n  return (\n    <div style={{ display: 'flex' }}>\n      <Virtuoso\n        totalCount={10000}\n        item={GenerateItem}\n        rangeChanged={({ startIndex, endIndex }) => {\n          setVisibleRange([startIndex, endIndex])\n        }}\n        style={{ height: '400px', width: '350px' }}\n      />\n      <div>\n        Current visible range:{' '}\n        <div>\n          <strong>\n            {visibleRange[0]} - {visibleRange[1]}\n          </strong>\n        </div>{' '}\n      </div>\n    </div>\n  )\n}\n"},{"key":"ScrollHandling","source":"import React, { useState } from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport {\n  ExampleListItem,\n  ExampleAvatar,\n  ExampleUserInfo,\n  ExampleImgAvatar,\n} from './ExampleComponents'\n\nexport default () => {\n  const [isScrolling, setIsScrolling] = useState(false)\n\n  return (\n    <Virtuoso\n      style={{\n        height: '400px',\n        width: '350px',\n      }}\n      totalCount={100}\n      scrollingStateChange={scrolling => {\n        setIsScrolling(scrolling)\n      }}\n      item={index => {\n        const user = getUser(index)\n        const title = `${index + 1}. ${user.name}`\n        return (\n          <ExampleListItem even={index % 2 === 0}>\n            {isScrolling ? (\n              <ExampleAvatar style={{ backgroundColor: '#ccc' }}>\n                &nbsp;\n              </ExampleAvatar>\n            ) : (\n              <ExampleImgAvatar src={user.avatar} />\n            )}\n\n            <ExampleUserInfo title={title}>\n              {user.description}\n            </ExampleUserInfo>\n          </ExampleListItem>\n        )\n      }}\n    />\n  )\n}\n"},{"key":"ScrollSeekPlaceholders","source":"import React, { useState } from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport { UserItem } from './ExampleComponents'\n\nconst GenerateItem = index => {\n  return <UserItem user={getUser(index)} index={index} />\n}\n\nconst randomHeights = Array(10)\n  .fill(true)\n  .map(() => Math.round(Math.random() * 60) + 10)\n\nexport default () => {\n  // use the visible range to provide information\n  // about the list current position.\n  const [visibleRange, setVisibleRange] = useState(['-', '-'])\n  return (\n    <div style={{ display: 'flex' }}>\n      <Virtuoso\n        totalCount={10000}\n        item={GenerateItem}\n        scrollSeek={{\n          enter: velocity => Math.abs(velocity) > 200,\n          exit: velocity => {\n            const shouldExit = Math.abs(velocity) < 30\n            if (shouldExit) {\n              setVisibleRange(['-', '-'])\n            }\n            return shouldExit\n          },\n          change: (_velocity, { startIndex, endIndex }) =>\n            setVisibleRange([startIndex, endIndex]),\n          // You can use index to randomize\n          // and make the placeholder list more organic.\n          placeholder: ({ height, index }) => (\n            <div\n              style={{\n                height,\n                backgroundColor: index % 2 ? '#fff' : '#f4f4f4',\n                padding: '8px',\n                boxSizing: 'border-box',\n                overflow: 'hidden',\n              }}\n            >\n              <div\n                style={{\n                  background: '#ccc',\n                  height: randomHeights[index % 10],\n                }}\n              ></div>\n            </div>\n          ),\n        }}\n        style={{ height: '400px', width: '350px' }}\n      />\n      <div>\n        Current visible range:{' '}\n        <div>\n          <strong>\n            {visibleRange[0]} - {visibleRange[1]}\n          </strong>\n        </div>{' '}\n      </div>\n    </div>\n  )\n}\n"},{"key":"ScrollToGroup","source":"import React, { useState, useRef } from 'react'\nimport { GroupedVirtuoso } from 'react-virtuoso'\nimport { generateGroupedUsers } from './FakeData'\nimport { ExampleGroup, UserItem } from './ExampleComponents'\n\nexport default () => {\n  // the generateGroupedUsers is a dummy implementation\n  // that builds grouped data\n  // the users variable contains 500 user records, sorted by name\n  // the groups variable contains the first\n  // letter groups -> ['A', 'B', 'C'], etc.\n  // finally, the groupCounts specifies how many items each\n  // group has -> [ 20, 30, 15, 10 ], etc.\n  const { users, groups, groupCounts } = generateGroupedUsers(500)\n  const virtuoso = useRef(null)\n  const [groupIndices, setGroupIndices] = useState([])\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <div>\n        <GroupedVirtuoso\n          ref={virtuoso}\n          groupIndices={indices => {\n            if (groupIndices.length !== indices.length) {\n              setGroupIndices(indices)\n            }\n          }}\n          style={{ height: '600px', width: '300px' }}\n          groupCounts={groupCounts}\n          group={index => {\n            return <ExampleGroup>{groups[index]}</ExampleGroup>\n          }}\n          item={index => {\n            return <UserItem user={users[index]} index={index} />\n          }}\n        />\n      </div>\n\n      <ul\n        style={{\n          marginLeft: '1rem',\n          listStyle: 'none',\n          fontSize: '0.8rem',\n        }}\n      >\n        {groupIndices.map((itemIndex, index) => (\n          <li key={index}>\n            <a\n              href=\"#\"\n              onClick={e => {\n                e.preventDefault()\n                virtuoso.current.scrollToIndex(itemIndex)\n              }}\n            >\n              {groups[index]}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n"},{"key":"ScrollToIndex","source":"import React, { useState, useRef } from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport { UserItem } from './ExampleComponents'\n\nconst GenerateItem = index => {\n  return <UserItem user={getUser(index)} index={index} />\n}\n\nexport default () => {\n  const [align, setAlign] = useState('start')\n  const virtuoso = useRef(null)\n  return (\n    <div style={{ display: 'flex' }}>\n      <div>\n        <Virtuoso\n          totalCount={1000}\n          overscan={200}\n          ref={virtuoso}\n          item={GenerateItem}\n          style={{ height: '400px', width: '350px' }}\n        />\n      </div>\n      <div>\n        <ul className=\"knobs\">\n          <li>\n            <button\n              onClick={() => {\n                virtuoso.current.scrollToIndex({\n                  index: 0,\n                  align,\n                })\n                return false\n              }}\n            >\n              Scroll To 1\n            </button>\n          </li>\n          <li>\n            <button\n              onClick={() => {\n                virtuoso.current.scrollToIndex({\n                  index: 499,\n                  align,\n                })\n                return false\n              }}\n            >\n              Scroll To 500\n            </button>\n          </li>\n          <li>\n            <button\n              onClick={() => {\n                virtuoso.current.scrollToIndex({\n                  index: 999,\n                  align,\n                })\n                return false\n              }}\n            >\n              Scroll To 1000\n            </button>\n          </li>\n          <li>\n            <label>\n              Align:\n              <select\n                value={align}\n                onChange={e => setAlign(e.target.value)}\n              >\n                <option value=\"start\">Start</option>\n                <option value=\"center\">Center</option>\n                <option value=\"end\">End</option>\n              </select>\n            </label>\n          </li>\n        </ul>\n      </div>\n    </div>\n  )\n}\n"},{"key":"StickToBottom","source":"import React, { useState, useRef } from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport { UserItem } from './ExampleComponents'\n\nconst GenerateItem = index => {\n  return <UserItem user={getUser(index)} index={index} />\n}\n\nexport default () => {\n  const [total, setTotal] = useState(1000)\n  const appendInterval = useRef(null)\n  return (\n    <Virtuoso\n      initialTopMostItemIndex={999}\n      totalCount={total}\n      atBottomStateChange={atBottom => {\n        clearInterval(appendInterval.current)\n        if (atBottom) {\n          appendInterval.current = setInterval(() => {\n            console.log('appending items')\n            setTotal(total + 3)\n          }, 200)\n        }\n      }}\n      item={GenerateItem}\n      followOutput={true}\n      style={{ height: '400px', width: '350px' }}\n    />\n  )\n}\n"},{"key":"TopItems","source":"import React from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport { UserItem } from './ExampleComponents'\n\nconst GenerateItem = index => {\n  return <UserItem user={getUser(index)} index={index} />\n}\n\nexport default () => (\n  <Virtuoso\n    totalCount={100000}\n    overscan={200}\n    topItems={2}\n    item={GenerateItem}\n    style={{ height: '400px', width: '350px' }}\n  />\n)\n"}]}}