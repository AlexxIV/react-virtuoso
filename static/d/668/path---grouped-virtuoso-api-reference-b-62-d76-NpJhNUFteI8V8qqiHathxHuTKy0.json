{"data":{"groupedVirtuosoApi":"## Properties of the `GroupedVirtuoso` Component\n\n### `groupCounts: number[]`\n\nMandatory. Specifies the amount of items in each group (and, actually, how many groups are there). For example, passing `[20, 30]` will display 2 groups with 20 and 30 items each.\n\n### `item: (index: number, groupIndex: number) => ReactElement`\n\nMandatory. Specifies how each item gets rendered. The callback receives the zero-based index of the item and the index of the group of the item.\n\n### `group: (groupIndex: number) => ReactElement`\n\nMandatory. Specifies how each each group header gets rendered. The callback receives the zero-based index of the group.\n\n### `style?: CSSProperties`\n\nWorks just like the `style` property of the flat component.\n\n### `className?: string`\n\nWorks just like the `className` property of the flat component.\n\n### `footer?: () => ReactElement`\n\nWorks just like the `footer` property of the flat component.\n\n### `overscan?: number`\n\nWorks just like the `overscan` property of the flat component.\n\n### `endReached?: (index: number) => void`\n\nWorks just like the `endReached` callback of the flat component.\n\n### `scrollingStateChange?: (isScrolling: boolean) => void`\n\nWorks just like the `scrollingStateChange` callback of the flat component.\n\n## Methods (available in both `Virtuoso` and `GroupedVirtuoso`)\n\n### `scrollToIndex(location: number | { index: number, align: 'start'|'center'|'end' }): void`\n\nScrolls the specified item into view. Passing the longer form allows the item to be aligned to the top, center or end of the list.\n\n**Notice:** having variable height items in the view being scrolled to can displace the item.\nIf this is your case, you can use `align: 'center'` to make sure that the entire item is visible.\n"},"pageContext":{"isCreatedByStatefulCreatePages":true}}