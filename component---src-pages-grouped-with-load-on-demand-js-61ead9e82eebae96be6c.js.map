{"version":3,"sources":["webpack:///./src/examples/GroupWithLoadOnDemand.js","webpack:///./src/pages/grouped-with-load-on-demand.js"],"names":["useMemo","generateGroupedUsers","users","groups","groupCounts","useState","currentGroupCounts","setCurrentGroupCounts","loadedItems","useRef","loading","setLoading","loadMore","useCallback","setTimeout","current","totalGroups","count","i","group","push","Math","min","length","calculateGroupsSoFar","useEffect","style","height","width","index","item","user","footer","padding","display","justifyContent","disabled","onClick","sidebar","path","Helmet","name","content"],"mappings":"yKA2Be,aAAO,IAAD,EACoBA,mBACrC,kBAAMC,YAAqB,OAC3B,IAFMC,EADW,EACXA,MAAOC,EADI,EACJA,OAAQC,EADJ,EACIA,YADJ,EAMiCC,mBAAS,IAAtDC,EANY,KAMQC,EANR,KAObC,EAAcC,iBAAO,GAPR,EAQWJ,oBAAS,GAAhCK,EARY,KAQHC,EARG,KAUbC,EAAWC,uBAAY,WAC3BF,GAAW,GAKXG,YAAW,WACTN,EAAYO,SAAW,GACvBJ,GAAW,GACXJ,EA/BuB,SAACS,EAAaC,GACzC,IAAMd,EAAS,GACXe,EAAI,EACR,EAAG,CACD,IAAMC,EAAQH,EAAYE,GAC1Bf,EAAOiB,KAAKC,KAAKC,IAAIH,EAAOF,IAC5BA,GAASE,EACTD,UACOD,EAAQ,GAAKC,GAAKF,EAAYO,QACvC,OAAOpB,EAuBDqB,CAAqBpB,EAAaI,EAAYO,YAE/C,OACF,IAIH,OAFAU,oBAAUb,EAAU,IAGlB,kBAAC,IAAD,CACEc,MAAO,CAAEC,OAAQ,QAASC,MAAO,SACjCxB,YAAaE,EACba,MAAO,SAAAU,GAAK,OACV,kBAAC,IAAD,cAAqB1B,EAAO0B,KAE9BC,KAAM,SAAAD,GAAK,OAAI,kBAAC,IAAD,CAAUE,KAAM7B,EAAM2B,GAAQA,MAAOA,KACpDG,OAAQ,WACN,OACE,yBACEN,MAAO,CACLO,QAAS,OACTC,QAAS,OACTC,eAAgB,WAGlB,4BAAQC,SAAU1B,EAAS2B,QAASzB,GACjCF,EAAU,aAAe,2B,SClEzB,4BACb,kBAAC,IAAD,CAAQ4B,QAAS,kBAAM,kBAAC,IAAD,CAAQC,KAAK,4BAClC,kBAACC,EAAA,OAAD,KACE,0BACEC,KAAK,cACLC,QAAQ,8EAGZ,wEACA,kCACM,iDADN,uBACuD,IACrD,wCAFF,4GAKA,iGAEM,6CAFN,yIAMA,kBAAC,EAAD","file":"component---src-pages-grouped-with-load-on-demand-js-61ead9e82eebae96be6c.js","sourcesContent":["import React, {\n  useEffect,\n  useCallback,\n  useState,\n  useMemo,\n  useRef,\n} from 'react'\nimport { GroupedVirtuoso } from 'react-virtuoso'\nimport { generateGroupedUsers } from './FakeData'\nimport { ExampleGroup, UserItem } from './ExampleComponents'\n\n// Slices the total groups to the groups\n// which contain the items so far\n// for example, if you have [10, 10, 10, 10]\n// groups in total, slicing them to 23 will result in [10, 10, 3]\nconst calculateGroupsSoFar = (totalGroups, count) => {\n  const groups = []\n  let i = 0\n  do {\n    const group = totalGroups[i]\n    groups.push(Math.min(group, count))\n    count -= group\n    i++\n  } while (count > 0 && i <= totalGroups.length)\n  return groups\n}\n\nexport default () => {\n  const { users, groups, groupCounts } = useMemo(\n    () => generateGroupedUsers(500),\n    []\n  )\n\n  const [currentGroupCounts, setCurrentGroupCounts] = useState([])\n  const loadedItems = useRef(0)\n  const [loading, setLoading] = useState(false)\n\n  const loadMore = useCallback(() => {\n    setLoading(true)\n\n    // the set timeout call is just for example purposes.\n    // In the real world,\n    // this can fetch and append data from a remote server.\n    setTimeout(() => {\n      loadedItems.current += 50\n      setLoading(false)\n      setCurrentGroupCounts(\n        calculateGroupsSoFar(groupCounts, loadedItems.current)\n      )\n    }, 500)\n  }, [])\n\n  useEffect(loadMore, [])\n\n  return (\n    <GroupedVirtuoso\n      style={{ height: '350px', width: '400px' }}\n      groupCounts={currentGroupCounts}\n      group={index => (\n        <ExampleGroup>Group {groups[index]}</ExampleGroup>\n      )}\n      item={index => <UserItem user={users[index]} index={index} />}\n      footer={() => {\n        return (\n          <div\n            style={{\n              padding: '2rem',\n              display: 'flex',\n              justifyContent: 'center',\n            }}\n          >\n            <button disabled={loading} onClick={loadMore}>\n              {loading ? 'Loading...' : 'Press to load more'}\n            </button>\n          </div>\n        )\n      }}\n    />\n  )\n}\n","import React from 'react'\nimport Layout from '../components/layout'\nimport Source from '../components/source'\nimport Example from '../examples/GroupWithLoadOnDemand'\nimport { Helmet } from 'react-helmet'\n\nexport default () => (\n  <Layout sidebar={() => <Source path=\"GroupWithLoadOnDemand\" />}>\n    <Helmet>\n      <meta\n        name=\"description\"\n        content=\"React Grouped Virtuoso live example with records grouped by first letter\"\n      />\n    </Helmet>\n    <h2>Grouped by First Letter (Load on Demand)</h2>\n    <p>\n      The <code>GroupedVirtuoso</code> component accepts a{' '}\n      <code>footer</code> render prop, which can be used to host a\n      load more button that appends more items to the existing ones.\n    </p>\n    <p>\n      To add additional items to the groups, you should re-calculate\n      the <code>groupCounts</code> property value with the group\n      values of the newly loaded items. Check the source code of this\n      example for a possible implementation.\n    </p>\n    <Example />\n  </Layout>\n)\n"],"sourceRoot":""}