(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{1314:function(e,t,n){"use strict";n.r(t);var a=n(0),l=n.n(a),r=n(1290),c=n(1291),i=(n(12),n(1292)),s=n(1294),o=n(1293),m=function(){var e=Object(a.useState)(!1),t=e[0],n=e[1];return l.a.createElement(i.b,{style:{height:"400px",width:"350px"},totalCount:100,scrollingStateChange:function(e){n(e)},item:function(e){var n=Object(s.b)(e),a=e+1+". "+n.name;return l.a.createElement(o.d,{even:e%2==0},t?l.a.createElement(o.a,{style:{backgroundColor:"#ccc"}},"Â "):l.a.createElement(o.c,{src:n.avatar}),l.a.createElement(o.e,{title:a},n.description))}})},u=n(123);t.default=function(){return l.a.createElement(r.a,{sidebar:function(){return l.a.createElement(c.a,{path:"ScrollHandling"})}},l.a.createElement(u.Helmet,null,l.a.createElement("meta",{name:"description",content:"React Virtuoso live example with performance tweak that simplifies content during scrolling using the scrollingStateChange callback"})),l.a.createElement("h2",null,"Handling scrolling"),l.a.createElement("p",null,"Loading and rendering images while scrolling ruins the scrolling performance."),l.a.createElement("p",null,"To deal with this, the Virtuoso component emits"," ",l.a.createElement("code",null,"scrollingStateChange")," when the user starts / stops scrolling. The callback receives ",l.a.createElement("code",null,"true")," when the user starts scrolling and ",l.a.createElement("code",null,"false")," shortly after the last scroll event."),l.a.createElement("p",null,"Handling this event can be used to optimize performance by hiding/replacing certain elements in the items."),l.a.createElement("p",null,"In the example above, the image avatars are replaced with placeholders when the user starts scrolling."),l.a.createElement(m,null))}}}]);
//# sourceMappingURL=component---src-pages-scroll-handling-js-32319026dddc165f2be4.js.map