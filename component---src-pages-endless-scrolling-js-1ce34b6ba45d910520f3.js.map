{"version":3,"sources":["webpack:///./src/examples/EndlessScrolling.js","webpack:///./src/pages/endless-scrolling.js"],"names":["GenerateItem","index","user","getUser","useState","total","setTotal","items","useRef","loading","loadMore","useCallback","current","setTimeout","length","useEffect","style","width","height","overscan","totalCount","item","endReached","footer","padding","textAlign","sidebar","path","Helmet","name","content"],"mappings":"wiBAUA,IAAMA,EAAe,SAAAC,GACnB,OAAO,kBAAC,IAAD,CAAUC,KAAMC,YAAQF,GAAQA,MAAOA,KAGjC,aAAO,IAAD,EACOG,mBAAS,GAA5BC,EADY,KACLC,EADK,KAEbC,EAAQC,iBAAO,IACfC,EAAUD,kBAAO,GAMjBE,EAAWC,uBAAY,WACvBF,EAAQG,UAGZH,EAAQG,SAAU,EAElBC,YAAW,WACT,IAAK,IAAIZ,EAAQI,EAAOJ,EAAQI,EAAQA,EAAQ,GAAIJ,IAClDM,EAAMK,QAAN,YAAoBL,EAAMK,SAA1B,CAAmCT,YAAQF,KAE7CQ,EAAQG,SAAU,EAClBN,EAASC,EAAMK,QAAQE,UACtB,QACF,IAMH,OAJAC,qBAAU,WACRL,MACC,IAGD,kBAAC,IAAD,CACEM,MAAO,CAAEC,MAAO,QAASC,OAAQ,SACjCC,SAAU,IACVC,WAAYf,EACZgB,KAAMrB,EACNsB,WAAY,kBAAMZ,KAClBa,OAAQ,WACN,OACE,yBAAKP,MAAO,CAAEQ,QAAS,OAAQC,UAAW,WAA1C,kB,SC7CK,4BACb,kBAAC,IAAD,CAAQC,QAAS,kBAAM,kBAAC,IAAD,CAAQC,KAAK,uBAClC,kBAACC,EAAA,OAAD,KACE,0BACEC,KAAK,cACLC,QAAQ,oEAGZ,mDACA,kCACM,4CADN,mLAIqC,0CAJrC,WAMA,0GAIA,kBAAC,EAAD","file":"component---src-pages-endless-scrolling-js-1ce34b6ba45d910520f3.js","sourcesContent":["import React, {\n  useState,\n  useRef,\n  useCallback,\n  useEffect,\n} from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport { UserItem } from './ExampleComponents'\n\nconst GenerateItem = index => {\n  return <UserItem user={getUser(index)} index={index} />\n}\n\nexport default () => {\n  const [total, setTotal] = useState(0)\n  const items = useRef([])\n  const loading = useRef(false)\n\n  // the setTimeout below simulates a network request.\n  // In the real world, you can fetch data from a service.\n  // the setTotal call will trigger a refresh for the list,\n  // so make sure you call it last\n  const loadMore = useCallback(() => {\n    if (loading.current) {\n      return\n    }\n    loading.current = true\n\n    setTimeout(() => {\n      for (let index = total; index < total + total + 20; index++) {\n        items.current = [...items.current, getUser(index)]\n      }\n      loading.current = false\n      setTotal(items.current.length)\n    }, 500)\n  }, [])\n\n  useEffect(() => {\n    loadMore()\n  }, [])\n\n  return (\n    <Virtuoso\n      style={{ width: '350px', height: '400px' }}\n      overscan={500}\n      totalCount={total}\n      item={GenerateItem}\n      endReached={() => loadMore()}\n      footer={() => {\n        return (\n          <div style={{ padding: '2rem', textAlign: 'center' }}>\n            Loading...\n          </div>\n        )\n      }}\n    />\n  )\n}\n","import React from 'react'\nimport Layout from '../components/layout'\nimport Source from '../components/source'\nimport Example from '../examples/EndlessScrolling'\nimport { Helmet } from 'react-helmet'\n\nexport default () => (\n  <Layout sidebar={() => <Source path=\"EndlessScrolling\" />}>\n    <Helmet>\n      <meta\n        name=\"description\"\n        content=\"React Virtuoso endless scrolling / load on demand data example\"\n      />\n    </Helmet>\n    <h2> Endless Scrolling </h2>\n    <p>\n      The <code>endReached</code> callback can be used to\n      automatically load more items when the user scrolls to the\n      bottom of the list. If you would like to load items more\n      aggressively, you can increase the <code>overscan</code> value.\n    </p>\n    <p>\n      Scroll fast to the bottom of the list to see additional items\n      being loaded.\n    </p>\n    <Example />\n  </Layout>\n)\n"],"sourceRoot":""}