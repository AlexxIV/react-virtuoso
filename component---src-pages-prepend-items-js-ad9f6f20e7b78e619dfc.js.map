{"version":3,"sources":["webpack:///./src/examples/PrependItems.js","webpack:///./src/pages/prepend-items.js"],"names":["virtuoso","useRef","initialIndexOffset","useState","Array","fill","map","_","index","getUser","users","setUsers","prependItems","useCallback","current","adjustForPrependedItems","style","display","ref","totalCount","length","item","user","height","width","className","onClick","sidebar","path","Helmet","name","content"],"mappings":"gjBAKe,iBACb,IAAMA,EAAWC,iBAAO,MAClBC,EAAqBD,iBAAO,KAFf,EAGOE,mBACxBC,MAAM,KACHC,MAAK,GACLC,KAAI,SAACC,EAAGC,GAAJ,OAAcC,YAAQ,IAAQD,OAHhCE,EAHY,KAGLC,EAHK,KASbC,EAAeC,uBAAY,WAY/B,OAVAX,EAAmBY,SADI,IAEvBH,EAAS,GAAD,SACHP,MAHkB,KAIlBC,MAAK,GACLC,KAAI,SAACC,EAAGC,GAAJ,OACHC,YAAQP,EAAmBY,QAAUN,OAJnC,EAMHE,KAELV,EAASc,QAAQC,wBAVM,MAWhB,IACN,CAACb,EAAoBQ,EAAOC,IAE/B,OACE,yBAAKK,MAAO,CAAEC,QAAS,SACrB,6BACE,kBAAC,IAAD,CACEC,IAAKlB,EACLmB,WAAYT,EAAMU,OAClBC,KAAM,SAAAb,GAAK,OACT,kBAAC,IAAD,CAAUc,KAAMZ,EAAMF,GAAQA,MAAOA,KAEvCQ,MAAO,CAAEO,OAAQ,QAASC,MAAO,YAGrC,6BACE,wBAAIC,UAAU,SACZ,4BACE,4BAAQC,QAASd,GAAjB,0B,SCtCG,4BACb,kBAAC,IAAD,CAAQe,QAAS,kBAAM,kBAAC,IAAD,CAAQC,KAAK,mBAClC,kBAACC,EAAA,OAAD,KACE,0BACEC,KAAK,cACLC,QAAQ,sFAGZ,gDAEA,yJAKA,2KAKA,0IAIA,kBAAC,EAAD","file":"component---src-pages-prepend-items-js-ad9f6f20e7b78e619dfc.js","sourcesContent":["import React, { useState, useRef, useCallback } from 'react'\nimport { Virtuoso } from 'react-virtuoso'\nimport { getUser } from './FakeData'\nimport { UserItem } from './ExampleComponents'\n\nexport default () => {\n  const virtuoso = useRef(null)\n  const initialIndexOffset = useRef(10000)\n  const [users, setUsers] = useState(\n    Array(200)\n      .fill(true)\n      .map((_, index) => getUser(10000 + index))\n  )\n\n  const prependItems = useCallback(() => {\n    const usersToPrepend = 100\n    initialIndexOffset.current -= usersToPrepend\n    setUsers([\n      ...Array(usersToPrepend)\n        .fill(true)\n        .map((_, index) =>\n          getUser(initialIndexOffset.current + index)\n        ),\n      ...users,\n    ])\n    virtuoso.current.adjustForPrependedItems(usersToPrepend)\n    return false\n  }, [initialIndexOffset, users, setUsers])\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <div>\n        <Virtuoso\n          ref={virtuoso}\n          totalCount={users.length}\n          item={index => (\n            <UserItem user={users[index]} index={index} />\n          )}\n          style={{ height: '400px', width: '350px' }}\n        />\n      </div>\n      <div>\n        <ul className=\"knobs\">\n          <li>\n            <button onClick={prependItems}>Prepend 100 items</button>\n          </li>\n        </ul>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport Layout from '../components/layout'\nimport Source from '../components/source'\nimport Example from '../examples/PrependItems'\nimport { Helmet } from 'react-helmet'\n\nexport default () => (\n  <Layout sidebar={() => <Source path=\"PrependItems\" />}>\n    <Helmet>\n      <meta\n        name=\"description\"\n        content=\"React Virtuoso live example with prepending items while preserving item indexes.\"\n      />\n    </Helmet>\n    <h2>Prepending Items</h2>\n\n    <p>\n      Appending items to the list is straightforward - as the items at\n      the bottom will not displace the currently rendered ones.\n    </p>\n\n    <p>\n      Prepending items is somewhat more complex, because the current\n      items should remain at their location and their indexes should\n      not be offset.\n    </p>\n    <p>\n      This example shows how to increase the item count and instruct\n      the component that you are prepending items.\n    </p>\n    <Example />\n  </Layout>\n)\n"],"sourceRoot":""}